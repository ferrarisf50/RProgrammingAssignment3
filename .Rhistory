pwd
test<- read.table("c:/users/ferrarisf50/desktop/test.csv",sep = ",",header=TRUE);
test<- test[,3:5]
test2<- read.table("c:/users/ferrarisf50/desktop/test2.csv",sep = ",",header=TRUE);
test2<- test2[,3:5]
test3<- read.table("c:/users/ferrarisf50/desktop/test3.csv",sep = ",",header=TRUE);
test3<- test3[,3:5]
test <- rbind(test,test2,test3)
warrior<- read.table("c:/users/ferrarisf50/desktop/warrior.csv",sep = ",",header=TRUE);
n_warrior <- 187
n_game <- 7099
count_m <- matrix(data=1,n_warrior,n_warrior)
total_m <- matrix(data=2,n_warrior,n_warrior)
tran1_m <- matrix(data=0,n_warrior,n_warrior)
empty_m <- matrix(data=0,n_warrior,n_warrior)
for (i in 1:n_game) {
total_m[test[i,2],test[i,3]] <- total_m[test[i,2],test[i,3]]+1
if (test[i,1]==1) count_m[test[i,2],test[i,3]]<- count_m[test[i,2],test[i,3]]+1
}
for (i in 1:n_warrior)
{
for (j in 1:n_warrior)
{
if (i!=j)
{
if (total_m[i,j]!=0 && total_m[j,i]!=0)
tran1_m[i,j] <- 0.5*(1-(count_m[i,j]/total_m[i,j]))+   0.5*(count_m[j,i]/total_m[j,i])
else if ( total_m[i,j]!=0 && total_m[j,i]==0)
{
tran1_m[i,j] <- 0.5*(1-(count_m[i,j]/total_m[i,j]))+ 0.5* ( 1-(count_m[i,j]/total_m[i,j])^2)
tran1_m[j,i] <- 0.5*(1-sqrt(1-(count_m[i,j]/total_m[i,j])))+ 0.5* ( (count_m[i,j]/total_m[i,j]))
}
else  empty_m[i,j] <- 1
}
else tran1_m[i,j] <-0
}
}
for (i in 1:n_warrior)
{
for (j in 1:n_warrior)
{
if (i!=j)
tran1_m[i,j] <- tran1_m[i,j]/(n_warrior-1-sum(empty_m[i,]))
}
tran1_m[i,i] <- 1-sum(tran1_m[i,])
}
v <- matrix(data=0,1,n_warrior)
w <- matrix(data=0,1,n_warrior)
for (i in 1:n_warrior)
{
v[i] <- sum(count_m[i,])/sum(total_m[i,])
w[i] <- sum(count_m[,i])/sum(total_m[,i])
}
v
w
mean(v)
mean(w)
v[i] <- sum(count_m[i,])/sum(total_m[i,])
w[i] <- 1-sum(count_m[,i])/sum(total_m[,i])
v <- matrix(data=0,1,n_warrior)
w <- matrix(data=0,1,n_warrior)
for (i in 1:n_warrior)
{
v[i] <- sum(count_m[i,])/sum(total_m[i,])
w[i] <- 1-sum(count_m[,i])/sum(total_m[,i])
}
v
w
mean(v)
mean(w)
sum(count_m[1,])
sum(total_m[1,])
c1
count_m <- matrix(data=1,n_warrior,n_warrior)   ## 武将i对阵武将j先手胜场数
total_m <- matrix(data=2,n_warrior,n_warrior)    ## 武将i对阵武将j先手场数
tran1_m <- matrix(data=0,n_warrior,n_warrior)     ## 转移矩阵
empty_m <- matrix(data=0,n_warrior,n_warrior)      ##武将i与武将j是否已经交手
for (i in 1:n_game) {        ##读取对战记录
total_m[test[i,2],test[i,3]] <- total_m[test[i,2],test[i,3]]+1
if (test[i,1]==1) count_m[test[i,2],test[i,3]]<- count_m[test[i,2],test[i,3]]+1
}
for (i in 1:n_warrior)
{
for (j in 1:n_warrior)
{
if (i!=j)
{
if (total_m[i,j]!=0 && total_m[j,i]!=0)
tran1_m[i,j] <- 0.5*(1-(count_m[i,j]/total_m[i,j]))+   0.5*(count_m[j,i]/total_m[j,i])
else if ( total_m[i,j]!=0 && total_m[j,i]==0)
{
tran1_m[i,j] <- 0.5*(1-(count_m[i,j]/total_m[i,j]))+ 0.5* ( 1-(count_m[i,j]/total_m[i,j])^2)
tran1_m[j,i] <- 0.5*(1-sqrt(1-(count_m[i,j]/total_m[i,j])))+ 0.5* ( (count_m[i,j]/total_m[i,j]))
}
else  empty_m[i,j] <- 1
}
else tran1_m[i,j] <-0
}
}
for (i in 1:n_warrior)
{
for (j in 1:n_warrior)
{
if (i!=j)
tran1_m[i,j] <- tran1_m[i,j]/(n_warrior-1-sum(empty_m[i,]))
}
tran1_m[i,i] <- 1-sum(tran1_m[i,])
}
library(markovchain)      ##调用markovchain package
colnames(tran1_m) <- warrior[,1]
rownames(tran1_m) <- warrior[,1]
rank_v<-new("markovchain",transitionMatrix=tran1_m)
steadyStates(rank_v)          ## 求稳定状态概率
c2=order(steadyStates(mcA))   ##最终排名
c2
c1<- cbind(diag(tran1_m))   ##胜率排名
c1
c2=order(steadyStates(rank_v))   ##最终排名
c2
warrior[,c2]
warrior[c2,]
print(t(warrior[c2,]))
c2=order(steadyStates(rank_v))
order(steadyStates(rank_v))
chain_m<-new("markovchain",transitionMatrix=tran1_m)    ## 定义markov链
rank_v <- steadyStates(chain_m)
sort(rank_v))   ##最终排名
sort(rank_v)   ##最终排名
t(order(rank_v))   ##最终排名
names(rank_v)=warrior[,1]
rank_v
order(rank_v)
rank_v[aa]
aa <-order(rank_v)   ##最终排名
rank_v[aa]
t(rank_v[aa])
t(rank_v[aa])
rank_v[aa]
chain_m<-new("markovchain",transitionMatrix=tran1_m)    ## 定义markov链
rank_v <- steadyStates(chain_m)          ## 求稳定状态概率
aa <-order(rank_v)   ##最终排名
rank_v[aa]
aa <-order(rank_v)
aa
warrior[aa]
warrior[aa,1]
print(warrior[aa,1])
aa
colnames(aa)
rownames(aa)
rownames(aa) <-warrior[,1]
rank_v <- rbind(warrior[,1],rank_v)
rank_v
rank_v <- steadyStates(chain_m)
rank_v <- cbind(warrior[,1],rank_v)
chain_m<-new("markovchain",transitionMatrix=tran1_m)    ## 定义markov链
rank_v <- steadyStates(chain_m)          ## 求稳定状态概率
rank_v
rank_v <- steadyStates(chain_m)          ## 求稳定状态概率
rank_v
chain_m<-new("markovchain",transitionMatrix=tran1_m)    ## 定义markov链
rownames(rank_v) <-  warrior[,1]
rank_v <- steadyStates(chain_m)          ## 求稳定状态概率
colnames(rank_v) <-  warrior[,1]
rank_v
aa <-order(rank_v)
aa
print(warrior[aa,1])
names(aa)
colnames(order(rank_v)) <-  warrior[,1]
c1<- cbind(diag(tran1_m))   ##胜率排名
c1
order(c1)
sort(c1)
names(sort(c1))
warrior[aa,]
warrior[aa,1]
warrior[aa,]
aa <-sort(rank_v,decreasing = TRUE)   ##最终排名
warrior[aa,]
rank_v <- steadyStates(chain_m)
aa <-sort(rank_v,decreasing = TRUE)
warrior[aa,]
aa
aa <-sort(rank_v)
aa
chain_m<-new("markovchain",transitionMatrix=tran1_m)    ## 定义markov链
rank_v <- steadyStates(chain_m)
c1<- cbind(diag(tran1_m))   ##胜率排名
aa=sort(c1)
warrior[aa,]
rr <-sort(rank_v)   ##最终排名
warrior[rr,]
rr
rr <-order(rank_v)   ##最终排名
warrior[rr,]
rr
rr <-order(rank_v,decreasing = TRUE)   ##最终排名
warrior[rr,]
c1<- cbind(diag(tran1_m))   ##胜率排名
aa=order(c1,decreasing = TRUE)
warrior[aa,]
table1 <- read.csv("outcome-of-care-measures.csv", header=TRUE, colClasses = "character")
table1 <- subset(table1,table1$State=="TX",select=c(2,17))
table1[,2] <- suppressWarnings(as.numeric(table1[,2]))
table1 <- na.omit(table1)
table1 <- table1[order(table1$Hospital.Name),]
setwd("c:/users/ferrarisf50/desktop/RProgrammingAssignment3")
table1 <- read.csv("outcome-of-care-measures.csv", header=TRUE, colClasses = "character")
table1 <- subset(table1,table1$State=="TX",select=c(2,17))
table1[,2] <- suppressWarnings(as.numeric(table1[,2]))
table1 <- na.omit(table1)
table1 <- table1[order(table1$Hospital.Name),]
table1
table1 <- table1[order(table1[,2]),]
table1
table1 <- table1[order(table1[,2],table1$hospital.name),]
table1 <- table1[order(table1[,2],table1[,1]),]
table1
table1[-1,1]
table1[1,1]
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
table1 <- read.csv("outcome-of-care-measures.csv", header=TRUE, colClasses = "character")
## Check that state and outcome are valid
if (outcome=="heart attack")  outcome1 <-11
else if (outcome=="heart failure") outcome1 <- 17
else if (outcome=="pneumonia") outcome1 <- 23
else stop("invalid outcome")
state1 <- as.vector(unique(table1$State))
if (state %in% state1) {
table1 <- subset(table1,table1$State==state,select=c(2,outcome1))
table1[,2] <- suppressWarnings(as.numeric(table1[,2]))
table1 <- na.omit(table1)
table1 <- table1[order(table1[,2],table1[,1]),]
if (num=="best")
{
##min1 <- which.min(table1[,2])
##table1[min1,1]
table1[1,1]
}
else if (num=="worst")
{
max1 <- which.max(table1[,2])
table1[max1,1]
}
else if (num<=nrow(table1))
{
table1[num,1]
}
else return(NA)
}
else stop("invalid state")
## Return hospital name in that state with the given rank
## 30-day death rate
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit
submit()
submit
submit()
submit()
submit()
table1 <- read.csv("outcome-of-care-measures.csv", header=TRUE, colClasses = "character")
table1 <- subset(table1,table1$State=="TX",select=c(2,7,17))
table1[,2] <- suppressWarnings(as.numeric(table1[,2]))
table1 <- na.omit(table1)
table1 <- table1[order(table1[,2],table1[,1]),]
table1
table1 <- read.csv("outcome-of-care-measures.csv", header=TRUE, colClasses = "character")
table1 <- subset(table1,table1$State=="TX",select=c(2,7,17))
table1 <- read.csv("outcome-of-care-measures.csv", header=TRUE, colClasses = "character")
table1 <- subset(table1,select=c(2,7,17))
table1[,2] <- suppressWarnings(as.numeric(table1[,2]))
table1 <- na.omit(table1)
table1 <- read.csv("outcome-of-care-measures.csv", header=TRUE, colClasses = "character")
table1 <- subset(table1,select=c(2,7,17))
table1[,2] <- suppressWarnings(as.numeric(table1[,2]))
table1
table1 <- read.csv("outcome-of-care-measures.csv", header=TRUE, colClasses = "character")
table1 <- subset(table1,select=c(2,17,7))
table1[,2] <- suppressWarnings(as.numeric(table1[,2]))
table1 <- na.omit(table1)
table1 <- table1[order(table1[,2],table1[,1]),]
group <- split(table1,table1$State)
group
table1 <- read.csv("outcome-of-care-measures.csv", header=TRUE, colClasses = "character")
table1 <- subset(table1,select=c(2,17,7))
table1[,2] <- suppressWarnings(as.numeric(table1[,2]))
table1 <- na.omit(table1)
group <- split(table1,table1$State)
table2 <- sapply(group, function(x) {
table3 <- x[order(x[,2],x[,1]),]
if(num == "best") {num <- 1}
if(num == "worst"){num <-nrow[table3]}
table3[num,1]
})
table2 <- sapply(group, function(x) {
table3 <- x[order(x[,2],x[,1]),]
#if(num == "best") {num <- 1}
#if(num == "worst"){num <-nrow[table3]}
table3[5,1]
})
table2
table2 <- sapply(group, function(x) {
table3 <- x[order(x[,2],x[,1]),]
#if(num == "best") {num <- 1}
#if(num == "worst"){num <-nrow[table3]}
table3[5,1]
})
table2
table4 <- data.frame(hospital = table2)
table4
rankall <- function(outcome, num = "best") {
## Read outcome data
table1 <- read.csv("outcome-of-care-measures.csv", header=TRUE, colClasses = "character")
## Check that state and outcome are valid
if (outcome=="heart attack")  outcome1 <-11
else if (outcome=="heart failure") outcome1 <- 17
else if (outcome=="pneumonia") outcome1 <- 23
else stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
table1 <- subset(table1,select=c(2,outcome1,7))
table1[,2] <- suppressWarnings(as.numeric(table1[,2]))
table1 <- na.omit(table1)
group <- split(table1,table1$State)
table2 <- sapply(group, function(x) {
table3 <- x[order(x[,2],x[,1]),]
if(num == "best") {num <- 1}
else if(num == "worst"){num <-nrow[table3]}
table3[num,1]
})
table4 <- data.frame(hospital = table2)
table4$state <- row.names(table4)
table4
## Return hospital name in that state with the given rank
## 30-day death rate
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
table2 <- sapply(group, function(x) {
table3 <- x[order(x[,2],x[,1]),]
#if(num == "best") {num <- 1}
num <-nrow[table3]
table3[num,1]
})
table2 <- sapply(group, function(x) {
table3 <- x[order(x[,2],x[,1]),]
#if(num == "best") {num <- 1}
num <-nrow(table3)
table3[num,1]
})
rankall <- function(outcome, num = "best") {
## Read outcome data
table1 <- read.csv("outcome-of-care-measures.csv", header=TRUE, colClasses = "character")
## Check that state and outcome are valid
if (outcome=="heart attack")  outcome1 <-11
else if (outcome=="heart failure") outcome1 <- 17
else if (outcome=="pneumonia") outcome1 <- 23
else stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
table1 <- subset(table1,select=c(2,outcome1,7))
table1[,2] <- suppressWarnings(as.numeric(table1[,2]))
table1 <- na.omit(table1)
group <- split(table1,table1$State)
table2 <- sapply(group, function(x) {
table3 <- x[order(x[,2],x[,1]),]
if(num == "best") {num <- 1}
else if(num == "worst"){num <-nrow(table3)}
table3[num,1]
})
table4 <- data.frame(hospital = table2)
table4$state <- row.names(table4)
table4
## Return hospital name in that state with the given rank
## 30-day death rate
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
